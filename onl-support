#!/usr/bin/python
# -*- coding: utf-8 -*-

from shutil import copytree, ignore_patterns, copy
from onl.platform.current import OnlPlatform
import errno
import subprocess
import os

__author__ = "Phil Huang"
__email__ = "phil_huang@edge-core.com"

platform_name = OnlPlatform().PLATFORM
TAR_NAME = "onl-support-" + platform_name
TAR_ROOT = "/tmp/" + TAR_NAME
COMMAND_ROOT = TAR_ROOT + "/support/"


def copy_dir(src_dir):
    dest = TAR_ROOT + src_dir
    try:
        copytree(src_dir, dest, symlinks=False, ignore=ignore_patterns('alternatives'))
    except OSError as e:
        if e.errno == errno.ENOTDIR:
            copy(src_dir, dest)
        else:
            print('Directory not copied. Error: {}'.format(e))
    except:
        pass


def dump_command(command, new_filename=None):

    # Create directory if not exists
    if not os.path.exists(COMMAND_ROOT):
        os.makedirs(COMMAND_ROOT)

    # Defined filename
    if new_filename:
        dest = COMMAND_ROOT + new_filename  # Create new filename
    else:
        dest = COMMAND_ROOT + command  # Filename using command name

    # Output result
    try:
        log_file = open(dest, "w+")
        command = command.split()  # str() split to `list`
        proc = subprocess.Popen(command,
                                stdout=log_file,
                                stderr=log_file)
        proc.wait()
        log_file.close()
    except Exception as e:
        print('Failed to open file: {}'.format(e))


if __name__ == '__main__':

    copy_dir_list = ['/etc',
                     '/var',
                     '/mnt/onl']

    dump_command_list = [ 'onl-sysconfig',
                          'lsmod',
                          'ifconfig',
                          ['ps aux', 'ps.result']]

    for dir_name in copy_dir_list:
        copy_dir(dir_name)
        print('Dump directory {} '.format(dir_name))

    for command in dump_command_list:

        if isinstance(command, str):
            dump_command(command)
        elif isinstance(command, list):
            dump_command(command[0], command[1])
        print('Dump command {} '.format(command))


